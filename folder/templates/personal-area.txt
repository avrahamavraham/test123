<!DOCTYPE html>
<html lang="he" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>אזור אישי של שחקן</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            margin: 0;
            padding: 20px;
            display: grid;
            grid-template-columns: 1fr 2fr 1fr;
            gap: 20px;
        }
        #playerName {
            grid-column: 1 / -1;
            font-size: 2.5em;
            text-align: center;
            color: #4a4a4a;
            margin-bottom: 20px;
        }
        .stats {
            grid-column: 1 / -1;
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-bottom: 20px;
        }
        .stat {
            background-color: #ffffff;
            padding: 10px;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .attributes {
            background-color: #e6f7ff;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .attribute {
            margin: 10px 0;
        }
        .attribute input {
            width: 40px;
            text-align: center;
            margin-right: 5px;
        }
        .inventory {
            grid-column: 2;
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
            gap: 10px;
            background-color: #fff5e6;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .inventory-slot {
            width: 100px;
            height: 120px;
            border: 2px solid #ffa500;
            border-radius: 5px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: space-between;
            background-size: contain;
            background-position: center;
            background-repeat: no-repeat;
            cursor: pointer;
            padding: 5px;
        }
        .inventory-slot input {
            width: 90%;
            margin-top: 5px;
            text-align: center;
        }
        #coinBag {
            width: 100px;
            height: 100px;
            background-color: #ffd700;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 1.5em;
            color: #000;
            position: absolute;
            top: 20px;
            left: 20px;
            cursor: pointer;
        }
        #experienceBar {
            width: 100%;
            height: 20px;
            background-color: #ddd;
            border-radius: 10px;
            overflow: hidden;
        }
        #experienceProgress {
            height: 100%;
            background-color: #4CAF50;
            width: 0%;
        }
        .special-items {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 10px;
            grid-column: 3;
        }
        #addItemButton {
            grid-column: 2;
            justify-self: start;
            margin-top: 10px;
        }
        #inventoryTitle {
            grid-column: 2;
            margin-bottom: 10px;
        }
        #backToListButton {
            grid-column: 1 / -1;
            justify-self: center;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <h1 id="playerName" contenteditable="true">שם השחקן</h1>
    
    <div id="coinBag" onclick="editCoins()">
        <span id="coins" contenteditable="true">0</span>
    </div>

    <div class="stats">
        <div class="stat">רמה: <span id="level" contenteditable="true">1</span></div>
        <div class="stat">חיים: <span id="health" contenteditable="true">100</span></div>
        <div class="stat">
            ניסיון: <span id="experience" contenteditable="true">0</span>
            <div id="experienceBar"><div id="experienceProgress"></div></div>
        </div>
    </div>

    <div class="attributes">
        <div class="attribute">
            כוח: <input type="number" id="strength" value="5" min="5" max="500" onchange="saveData()">
        </div>
        <div class="attribute">
            זריזות: <input type="number" id="dexterity" value="5" min="5" max="500" onchange="saveData()">
        </div>
        <div class="attribute">
            חכמה: <input type="number" id="wisdom" value="5" min="5" max="500" onchange="saveData()">
        </div>
        <div class="attribute">
            זיכרון: <input type="number" id="memory" value="5" min="5" max="500" onchange="saveData()">
        </div>
    </div>

    <div class="special-items">
        <div class="inventory-slot" onclick="addImage(this)"><input type="text" placeholder="שם החפץ"></div>
        <div class="inventory-slot" onclick="addImage(this)"><input type="text" placeholder="שם החפץ"></div>
        <div class="inventory-slot" onclick="addImage(this)"><input type="text" placeholder="שם החפץ"></div>
        <div class="inventory-slot" onclick="addImage(this)"><input type="text" placeholder="שם החפץ"></div>
    </div>

    <h2 id="inventoryTitle">תיק חפצים</h2>
    <div id="inventory" class="inventory">
        <!-- כאן יתווספו חפצים דינמית -->
    </div>
    <button id="addItemButton" onclick="addInventorySlot()">הוספת חפץ</button>

    <button id="backToListButton" onclick="goToPlayerList()">חזרה לרשימת השחקנים</button>

    <script>
        let currentPlayer;

        function addImage(slot) {
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = 'image/*';
            input.onchange = function(event) {
                const file = event.target.files[0];
                const reader = new FileReader();
                reader.onload = function(e) {
                    slot.style.backgroundImage = `url(${e.target.result})`;
                    saveData();
                };
                reader.readAsDataURL(file);
            };
            input.click();
        }

        function updateExperienceBar() {
            const level = parseInt(document.getElementById('level').textContent);
            const experience = parseInt(document.getElementById('experience').textContent);
            const maxExperience = level * 100;
            const percentage = (experience / maxExperience) * 100;
            document.getElementById('experienceProgress').style.width = `${percentage}%`;
        }

        function saveData() {
            currentPlayer = {
                name: document.getElementById('playerName').textContent,
                level: parseInt(document.getElementById('level').textContent),
                health: parseInt(document.getElementById('health').textContent),
                experience: parseInt(document.getElementById('experience').textContent),
                strength: parseInt(document.getElementById('strength').value),
                dexterity: parseInt(document.getElementById('dexterity').value),
                wisdom: parseInt(document.getElementById('wisdom').value),
                memory: parseInt(document.getElementById('memory').value),
                coins: parseInt(document.getElementById('coins').textContent),
                inventory: Array.from(document.querySelectorAll('.inventory-slot')).map(slot => ({
                    image: slot.style.backgroundImage,
                    name: slot.querySelector('input').value
                }))
            };
            
            localStorage.setItem('currentPlayer', JSON.stringify(currentPlayer));
            updatePlayerInList(currentPlayer);
            updateExperienceBar();
        }

        function updatePlayerInList(playerData) {
            let allPlayers = JSON.parse(localStorage.getItem('players') || '[]');
            const index = allPlayers.findIndex(p => p.name === playerData.name);
            if (index !== -1) {
                allPlayers[index] = playerData;
            } else {
                allPlayers.push(playerData);
            }
            localStorage.setItem('players', JSON.stringify(allPlayers));
        }

        function loadData() {
            const playerName = new URLSearchParams(window
function loadData() {
            const playerName = new URLSearchParams(window.location.search).get('name');
            if (playerName) {
                const allPlayers = JSON.parse(localStorage.getItem('players') || '[]');
                currentPlayer = allPlayers.find(p => p.name === playerName) || {};
            } else {
                currentPlayer = JSON.parse(localStorage.getItem('currentPlayer') || '{}');
            }

            if (currentPlayer) {
                document.getElementById('playerName').textContent = currentPlayer.name || '';
                document.getElementById('level').textContent = currentPlayer.level || 1;
                document.getElementById('health').textContent = currentPlayer.health || 100;
                document.getElementById('experience').textContent = currentPlayer.experience || 0;
                document.getElementById('strength').value = currentPlayer.strength || 5;
                document.getElementById('dexterity').value = currentPlayer.dexterity || 5;
                document.getElementById('wisdom').value = currentPlayer.wisdom || 5;
                document.getElementById('memory').value = currentPlayer.memory || 5;
                document.getElementById('coins').textContent = currentPlayer.coins || 0;

                const inventory = document.getElementById('inventory');
                inventory.innerHTML = ''; // ניקוי החפצים הקיימים
                if (currentPlayer.inventory) {
                    currentPlayer.inventory.forEach(item => {
                        const slot = addInventorySlot();
                        if (item.image) {
                            slot.style.backgroundImage = item.image;
                        }
                        if (item.name) {
                            slot.querySelector('input').value = item.name;
                        }
                    });
                }
                updateExperienceBar();
            }
        }

        function addInventorySlot() {
            const slot = document.createElement('div');
            slot.className = 'inventory-slot';
            slot.onclick = function() { addImage(this); };
            const label = document.createElement('input');
            label.type = 'text';
            label.placeholder = 'שם החפץ';
            slot.appendChild(label);
            document.getElementById('inventory').appendChild(slot);
            return slot;
        }

        function editCoins() {
            const coins = document.getElementById('coins');
            coins.contentEditable = true;
            coins.focus();
        }

        function goToPlayerList() {
            window.location.href = '/index';
        }

        document.addEventListener('DOMContentLoaded', () => {
            loadData();
            if (document.querySelectorAll('.inventory-slot').length === 0) {
                for (let i = 0; i < 5; i++) {
                    addInventorySlot();
                }
            }
        });

        document.addEventListener('input', saveData);
        document.addEventListener('blur', saveData, true);
    </script>
</body>
</html>